@page "/tables"
@using System.Diagnostics
@inject IStringLocalizer<Tables> Loc 
@inject IJSRuntime JSRuntime 
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage
@inject TablesExerciseFactory TablesExerciseFactory
@inject ExerciseRepeater ExerciseRepeater
@inject RepeatPriorityCalculator RepeatPriorityCalculator

@{
switch (state)
{
    case State.Initializing:
    {
        <h1>@Loc["Multiplication tables"]</h1>

        <p>@Loc["Select the tables that you want to exercise:"]</p>
        <p>
        @for (int i = 2; i <= 10; i++)
        {
            var buttonNo = i;
            <button type="button" class="btn btn-outline-primary @(IsActive(tables, i) ? "active" : "")" @onclick="() => Toggle(tables, buttonNo)">
                @i
            </button>
        }
        </p>

        <p>
            <button type="button" class="btn btn-outline-primary @(IsActive(types, 0) ? "active" : "")" @onclick="() => Toggle(types, 0)">
                @Loc["Multiply"]
            </button>
            <button type="button" class="btn btn-outline-primary @(IsActive(types, 1) ? "active" : "")" @onclick="() => Toggle(types, 1)">
                @Loc["Multiply reversed"]
            </button>
            <button type="button" class="btn btn-outline-primary @(IsActive(types, 2) ? "active" : "")" @onclick="() => Toggle(types, 2)">
                @Loc["Divide"]
            </button>
        </p>

        <div class="form-group row">
            <div class="col-xs-2">
                <label for="exerciseCount">@Loc["Number of exercises:"]</label>                
                <input type="number" class="form-control" @bind="exerciseCount" id="exerciseCount"/>
                <p class="text-muted">@Loc[""]</p>
            </div>
            <div class="col-xs-2">
                <label for="exerciseCount">@Loc["Desired duration per exercise:"]</label>                
                <input type="number" class="form-control" @bind="exerciseDuration" id="exerciseDuration"/>
                <p class="text-muted">@Loc["in seconds (0 = no limit)"]</p>
            </div>
        </div>
        <div class="form-group row">
            @Loc["The computer learns which exercises are most difficult for the children."]
            @Loc["When practicing long enough, the wrong exercises are repeated first, and then the exercises which weren't completed within the desired time."]
            @Loc["A progress bar is shown. In the end the bar will hang a bit if there are insufficient exercises can be made by the desired time."]
        </div>

        <button type="button" class="btn btn-success" @onclick="Start">@Loc["Start"]</button>

        break;
    }

    case State.Exercising:
    {

        @if (message != null)
        {
            <div class="alert @( messageSuccess ? "alert-success" : "alert-danger" )" role="alert">
                @message
            </div>
        }
        <p class="exercise">
            @((MarkupString)exercise.Html)
            <br/>
            <input type="number" class="form-control form-control-lg" @bind="answer" @onkeyup="Answer_onkeyup" @ref="answerField"/>
            <button type="button" class="btn btn-primary" @onclick="Check">@Loc["Check"]</button>
        </p>
        <hr/>
        <p>
            @Loc["Score:"] @score_correct / @score_total
            @if (@score_total > 0)
            {
                <small>(@(Math.Round(score_correct * 100.0 / score_total))%)</small>
            }
        </p>
        <div class="progress">
            <div class="progress-bar bg-success" role="progressbar" style="width: @percentDone%" aria-valuenow="25" aria-valuemin="0" aria-valuemax="100"></div>
        </div>

        break;
    }

    case State.Finished:
    {

        @if (message != null)
        {
            <div class="alert @( messageSuccess ? "alert-success" : "alert-danger" )" role="alert">
                @message
            </div>
        }
        <p class="exercise">
            @Loc["Finished!"]
        </p>
        <p>
            <a href="/report">@Loc["Exercise report"]</a>
        </p>
        <hr/>
        <p>
            @Loc["Score:"] @score_correct / @score_total
            @if (@score_total > 0)
            {
                <small>(@(Math.Round(score_correct * 100.0 / score_total))%)</small>
            }
        </p>
        <div class="progress">
            <div class="progress-bar bg-success" role="progressbar" style="width: @percentDone%" aria-valuenow="25" aria-valuemin="0" aria-valuemax="100"></div>
        </div>

        break;
    }
}
}

@code {
    private ElementReference answerField;
    private Random random = new Random();

    enum State { Initializing, Exercising, Finished }
    State state = State.Initializing;

    Exercise exercise;
    private string answer;
    private string message;
    private bool messageSuccess;
    int exerciseCount = 50;
    int exerciseDuration = 5;
    int trial = 0;
    int percentDone = 0;
    Stopwatch stopwatch = new Stopwatch();

    int score_correct = 0, score_total = 0;

    readonly static IReadOnlyList<int> AllTables = new List<int>() { 2, 3, 4, 5, 6, 7, 8, 9, 10 };  
    readonly static IReadOnlyList<int> AllTypes = new List<int>() { 0, 1, 2 };  
    List<int> tables = AllTables.ToList();
    List<int> types = AllTypes.ToList();

    private List<int> GetCheckedList(IReadOnlyList<int> originalList, IReadOnlyList<int> allList)
    {
        List<int> newList;
        if (originalList == null)
        {
            newList = allList.ToList();
        }
        else
        {
            newList = new List<int>();
            foreach (var item in originalList)
            {
                if (!newList.Any(i => i == item) && allList.Any(i => i == item))
                    newList.Add(item);
            }
        }
        return newList;
    }

    protected override async Task OnInitializedAsync()
    {
        var localTables = await LocalStorage.GetItemAsync<List<int>>("Tables#tables");
        if (localTables != null)
        {
            tables = GetCheckedList(localTables, AllTables);
            if (tables.Count == 0)
                tables.Add(2);
        }
        var localTypes = await LocalStorage.GetItemAsync<List<int>>("Tables#types");
        types = GetCheckedList(localTypes, AllTypes);
    }

    private bool IsActive(List<int> list, int value)
    {
        return list.Any(a => a == value);
    }

    private void Toggle(List<int> list, int value)
    {
        if (list.RemoveAll(a => a == value) == 0 || list.Count == 0)
            list.Add(value);
    }

    private async Task Start()
    {
        await LocalStorage.SetItemAsync("Tables#tables", tables);
        await LocalStorage.SetItemAsync("Tables#types", types);

        TablesExerciseFactory.Initialize(tables, types);
        await JSRuntime.GTagEvent("Start", nameof(Tables));

        state = State.Exercising;
        message = null;
        messageSuccess = false;
        answer = "";
        score_correct = 0;
        score_total = 0;
        percentDone = 0;
        RepeatPriorityCalculator.TargetDuration = exerciseDuration;        
        await NewExercise();
        StateHasChanged();

        await JSRuntime.FocusAsync(answerField);
    }

    private async Task Answer_onkeyup(KeyboardEventArgs eventArgs)
    {
        if (eventArgs.Key == "Enter")
        {
            await Check();
        }
    }

    private async Task Check()
    {
        if (string.IsNullOrWhiteSpace(answer))
        {
            message = null;
            messageSuccess = true;
        }
        else if (int.TryParse(answer, out int answerNumber))
        {
            bool isCorrect = (answerNumber == exercise.Result);
            score_total++;
            Response response = new Response(exercise)
            {
                Answer = answerNumber, 
                IsCorrect = isCorrect, 
                Duration = stopwatch.ElapsedMilliseconds,
                Ordinal = score_total,
                Trial = trial,
            };
            double repeatPriority = RepeatPriorityCalculator.Calculate(response);
            exercise.AddResponse(response, repeatPriority);
            if (isCorrect)
            {
                message = @Loc["Correct!"];
                messageSuccess = true;
                score_correct++;
                int percentDone1 = (exerciseCount - ExerciseRepeater.CountInvalidExercises()) * 100 / exerciseCount;
                int percentDone2 = score_correct * 100 / exerciseCount;
                percentDone = Math.Min(percentDone1, percentDone2);
                //message += $"  {percentDone1}  {percentDone2}";
                
                if (!(percentDone >= 100)) // '<'' gives errors...
                    await NewExercise();
                else
                    state = State.Finished;
            }
            else
            {
                message = @Loc["Wrong!"];
                messageSuccess = false;
                stopwatch.Restart();
                trial++;
            }
        }
        else
        {
            message = @Loc["Your answer is not a valid number!"];
            messageSuccess = false;
        }
        answer = "";
        await JSRuntime.FocusAsync(answerField);
    }

    private async Task NewExercise()
    {
        do {
            exercise = TablesExerciseFactory.GetExercise();
            exercise = ExerciseRepeater.ProcessExercise(exercise);
        } while (exercise == null);

        await JSRuntime.GTagEvent("Exercise", nameof(Tables));

        stopwatch.Restart();
        trial = 0;
    }
}
